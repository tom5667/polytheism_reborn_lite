#Etruscan polytheism decission return to Etruscan polytheism 
#changes to secret religion when paradox includes secret religions 
# etc_return_decision = {
# 		picture = "gfx/interface/illustrations/decisions/etruscan.dds"
# 		major = yes
# 		desc =  etc_return_decision_desc
# 	is_shown = {
# 		current_date < 769.1.1
# 		is_ai = no
# 		is_landed = yes
# 		culture_group = culture_group:latin_group 
# 		OR = { 
# 			has_religion = religion:christianity_religion
			
# 		}
# 		NOR = {
# 			has_faith = faith:etc_polytheism
# 			is_target_in_global_variable_list = {
# 				name = unavailable_unique_decisions_etc
# 				target = flag:flag_restored_etc_religion
# 			}
# 		}
# 	}

# 	is_valid = {
# 		is_adult = yes
# 		is_imprisoned = no
# 		is_at_war = no
# 		NOR = {
# 			has_trait = possessed_1
# 			has_trait = lunatic_1
# 			has_trait = cynical
# 			has_trait = zealous
# 			has_religion = religion:etruscan_religion 
# 		}
# 	}
# 	cost = {
# 		prestige = 100
# 		piety = 200
# 	}
# 	effect = {
# 		trigger_event = etc.001 
# 		save_scope_as = actor
# 		add_trait = pilgrim 

# 		hidden_effect = {
# 			add_to_global_variable_list = {
# 				name = unavailable_unique_decisions_etc
# 				target = flag:flag_restored_etc_religion
# 			}
# 		}
# 	}
# } 



#Choose main deity Etruscan Polytheism 
choose_main_deity_etruscan_decision = {
	picture = "gfx/interface/illustrations/decisions/fp1_decisons_hold_bolt.dds"

	#desc = choose_main_deity_celtic_decision_desc
	desc = select_personal_deity_germanic_decision_desc
	selection_tooltip = choose_main_deity_etruscan_decision_tooltip

	is_shown = {
		# DLC check.
		has_fp1_dlc_trigger = yes
		# Following a valid religion & faith.
		religion = religion:etruscan_religion
		
	}

	is_valid = {
	}

	is_valid_showing_failures_only = {
		# Have to at _least_ not be in piety debt.
		piety >= 0
	}

	cooldown = { years = 2 }

	effect = {
		# Show the possible options.
			show_as_tooltip = {
				random_list = {
					desc = choose_main_deity_punic_decision_tt
					100 = {
						show_chance = no
						desc = select_main_deity_etruscan_decision.select_tinia
						add_character_modifier = etruscan_tinia
					}
					100 = {
						show_chance = no
						desc = select_main_deity_etruscan_decision.select_nortia
						add_character_modifier = etruscan_nortia
					}
					100 = {
						show_chance = no
						desc = select_main_deity_etruscan_decision.select_turms
						add_character_modifier = etruscan_turms
					}
					100 = {
						show_chance = no
						desc = select_main_deity_etruscan_decision.select_menrva
						add_character_modifier = etruscan_menrva
					}
					100 = {
						show_chance = no
						desc = select_main_deity_etruscan_decision.select_maris
						add_character_modifier = etruscan_maris
					}
				}
			}
			trigger_event = etc.007
	}
	ai_check_interval = 96
	
	ai_potential = {
		piety >= minor_piety_value
		 NOR = {
		 	has_character_modifier = etruscan_tinia #High god
		 	has_character_modifier = etruscan_nortia #fertility
		 	has_character_modifier = etruscan_turms #wealth
			has_character_modifier = etruscan_menrva #Knowledge
			has_character_modifier = etruscan_maris #War 
			
		 }
	}

	ai_will_do = {
		base = 100
	}
}

create_etruria_decision = {
	picture = "gfx/interface/illustrations/decisions/etruscan.dds"
	desc = create_etruria_decision_desc
	major = yes
	ai_check_interval = 4
	is_shown = {
		is_ruler = yes
		is_landed = yes
		has_game_rule = pr_ancient_kingdoms_decisions_on
		AND = {
			OR = {
				religion = religion:etruscan_religion
				culture = culture:etruscan
			}
		}

		NOT = {
			is_target_in_global_variable_list = {
				name = unavailable_unique_decisions
				target = flag:flag_recreated_etruria
			}
		}
	}
	cost = {
		gold = 300 
	}
	is_valid = {
		AND = {
			has_title = title:d_pisa
			has_title = title:d_toscana
			#has_title = title:d_corsica
			#has_title = title:d_romagna
			#has_title = title:d_latium
			#has_title = title:d_capua
			OR = {
				religion = religion:etruscan_religion
				culture = culture:etruscan
			}

		}

		is_imprisoned = no	
		is_at_war = no
	}
	effect = {
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:flag_recreated_etruria
		}
		custom_tooltip = create_etruria_decision_effect_tooltip
		title:d_pisa = { save_scope_as = pisa }
		title:d_toscana = { save_scope_as = toscana }

		create_title_and_vassal_change = {
			type = created
			save_scope_as = title_change
			add_claim_on_loss = yes
		}
		title:k_etruria = {
			change_title_holder ={
				holder = root
				change = scope:title_change
			}
		}
		resolve_title_and_vassal_change = scope:title_change
		title:d_toscana = { set_de_jure_liege_title = k_etruria }
		title:d_pisa = { set_de_jure_liege_title = k_etruria }
		
		hidden_effect = {
			trigger_event = etc.008
		}
	}

	cost = {
		gold = {
			value = major_gold_value
			multiply = 0.5
			round = yes
		}
		prestige = {
			value = major_prestige_gain
			multiply = 0.5
			round = yes
		}
	}

	ai_potential = {

	}

	ai_will_do = {
		base = 100
	}
 }


 set_capital_pisa_decision = {
	picture = "gfx/interface/illustrations/decisions/etruscan.dds"

	desc = set_capital_pisa_decision_desc
	selection_tooltip = set_capital_pisa_decision_tooltip
	major = yes

	ai_check_interval = 12

	is_shown = {
		is_ruler = yes
		is_landed = yes
		has_title = title:k_etruria
		NOT = { capital_county = { this = title:c_pisa } }
		OR = {
			title:c_pisa.holder = { 	
				any_liege_or_above = { this = root }
			}
			title:c_pisa.holder = { this = root }
		}
	}

	is_valid_showing_failures_only = {
		is_capable_adult = yes
		is_imprisoned = no
		is_independent_ruler = yes
	}

	effect = {
		if = { #Usurp if not held personally.
			limit = {
				NOT = { title:c_pisa.holder = { this = root } }
			}
			create_title_and_vassal_change = {
				type = returned
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:c_pisa = {
				change_title_holder = {
					holder = root
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change

		}
		set_realm_capital = title:c_pisa
	}
	
	ai_potential = {
		always = yes
	}

	ai_will_do = { #Do it always, for coherence.
		base = 100
	}
}